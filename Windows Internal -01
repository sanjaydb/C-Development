Summary of Thread-related Concepts:
-----------------------------------
* A thread is an entity within a process that Windows schedules for execution. It is essential for the program of a process to run.
* Components of a thread include CPU registers representing the processor state, 
          two stacks (kernel mode and user mode), 
          thread-local storage (TLS), and 
          a unique identifier called a thread ID.
* Threads may have their own security context or token, which is useful for multithreaded server applications that impersonate client security contexts.
* Switching execution from one thread to another involves the kernel scheduler and can be costly. 
          Windows employs fibers and user-mode scheduling (UMS) to reduce this cost.
* Fibers allow an application to schedule its own threads of execution. They are implemented in user mode and are often referred to as lightweight threads. 
          Fibers can be created and selected manually through fiber-specific functions.
* While fibers provide control over scheduling, they have limitations such as issues with sharing thread local storage (TLS) and poor performance for I/O-bound tasks. 
          They are also limited to cooperative multi-tasking and cannot run concurrently on multiple processors.
* User-mode scheduling (UMS) threads, available only on 64-bit versions of Windows, offer advantages similar to fibers while overcoming some of their limitations. 
          UMS threads have their own kernel thread state, are visible to the kernel, and 
          can issue blocking system calls, 
          share resources, 
          and follow a pre-emptible model.
* Threads within a process share the process's virtual address space and other resources, but each thread has its own execution context.
* Each process has a security context stored in an access token. 
          Threads can obtain their own access token, allowing them to impersonate the security context of another process without affecting other threads.
* The memory manager uses virtual address descriptors (VADs) to keep track of the virtual addresses used by a process.


Important Points:
-----------------
* Threads are essential for program execution within a process.
* Threads consist of CPU registers, stacks, thread-local storage (TLS), and a unique identifier.
* Fibers provide lightweight thread-like functionality but have limitations and are best used in specific scenarios.
* UMS threads offer advantages similar to fibers but are visible to the kernel and can issue blocking system calls.
* Threads share a process's virtual address space and have their own execution context.
* Access tokens contain security context information for processes and can be obtained by threads to impersonate other processes.
* The memory manager uses virtual address descriptors (VADs) to track virtual addresses within a process.


