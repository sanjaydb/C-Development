Type-safe callbacks
Many-to-many relationship
Implemented in QObject
Slots are automatically disconnected when the receiver is deleted.
Only connect the signals you need, while in a listener you need to implement also the methods you won't use.
You can directly connect signals to slots, without having to implement a listener method calling another method
When implementing your own signals/slots, there is no need to do the listener management yourself as this is done by the qt object system

Signal
A signal is a way to inform a possible observer that something happened.
  A QPushButton is clicked.
  An asynchronous service handler is finished.
  Signal is sent, or emitted, using the keyword "emit".
  
Slot
A slot is a function that is to be executed when a signal has been emitted.

Connecting Signals and Slots
To setup the signal-slot connection, we must first determine the connection.
Syntax: connect(sender, SIGNAL(signal), receiver, SLOT(slot)));



In Qt, we have an alternative to the callback technique: We use signals and slots. A signal is emitted when a particular event occurs.
Qt's widgets have many predefined signals, but we can always subclass widgets to add our own signals to them. A slot is a function that is 
called in response to a particular signal.
 Qt's widgets have many pre-defined slots, but it is common practice to subclass widgets and add your own slots so that you can handle the signals that 
 you are interested in.

Signals are public access functions and can be emitted from anywhere, but QT recommend to only emit them from the class that defines 
the signal and its subclasses.
Signals are automatically generated by the moc and must not be implemented in the .cpp file. They can never have return types (i.e. use void).







Ref:
sanjaydb/hacking/Reference


